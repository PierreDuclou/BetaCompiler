
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generated.cuplex;

import ul.miage.l3.compilation.groupe_i.symbols.*;
import ul.miage.l3.compilation.groupe_i.ast.*;
import java.util.LinkedList;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\002" +
    "\000\002\030\002\000\002\004\012\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\003\000\002" +
    "\006\002\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\010\005\000\002\010\003\000\002\010\002" +
    "\000\002\011\006\000\002\011\005\000\002\012\004\000" +
    "\002\012\004\000\002\012\002\000\002\013\003\000\002" +
    "\013\003\000\002\014\005\000\002\014\007\000\002\015" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\017\005\000\002\020\004\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\026" +
    "\006\000\002\026\004\000\002\027\005\000\002\025\004" +
    "\000\002\022\005\000\002\022\005\000\002\022\003\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\024\005\000\002\024\003\000\002\024\003\000\002\024" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\010\002\ufffc\004\ufffc\036\ufffc\001\002\000" +
    "\010\002\000\004\013\036\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\006\021\060\030" +
    "\ufffb\001\002\000\010\002\ufffd\004\ufffd\036\ufffd\001\002" +
    "\000\004\012\056\001\002\000\004\012\055\001\002\000" +
    "\004\036\014\001\002\000\012\012\uffd7\013\uffd7\021\015" +
    "\031\uffd7\001\002\000\014\030\026\034\016\035\023\036" +
    "\022\037\020\001\002\000\004\030\052\001\002\000\030" +
    "\012\uffd2\013\uffd2\015\047\016\046\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\031\uffd2\001\002\000\034" +
    "\012\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc" +
    "\001\002\000\010\012\uffd8\013\uffd8\031\uffd8\001\002\000" +
    "\036\012\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\043\031\uffcb\001\002\000\004\030\035\001\002\000\034" +
    "\012\uffcf\013\uffcf\015\uffcf\016\uffcf\017\032\020\031\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf" +
    "\001\002\000\034\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\031\uffcd\001\002\000\014\030\026\034\016\035" +
    "\023\036\022\037\020\001\002\000\004\031\030\001\002" +
    "\000\034\012\uffce\013\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\031\uffce\001\002\000\014\030\026\034\016\035\023\036" +
    "\022\037\020\001\002\000\014\030\026\034\016\035\023" +
    "\036\022\037\020\001\002\000\030\012\uffd0\013\uffd0\015" +
    "\uffd0\016\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\031\uffd0\001\002\000\030\012\uffd1\013\uffd1\015" +
    "\uffd1\016\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\031\uffd1\001\002\000\020\013\uffef\030\026\031" +
    "\uffef\034\016\035\023\036\022\037\020\001\002\000\006" +
    "\013\040\031\041\001\002\000\006\013\ufff0\031\ufff0\001" +
    "\002\000\014\030\026\034\016\035\023\036\022\037\020" +
    "\001\002\000\034\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\031\ufff2\001\002\000\006\013\ufff1\031\ufff1\001" +
    "\002\000\020\013\uffef\030\026\031\uffef\034\016\035\023" +
    "\036\022\037\020\001\002\000\006\013\040\031\045\001" +
    "\002\000\034\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\031\ufff4\001\002\000\014\030\026\034\016\035\023" +
    "\036\022\037\020\001\002\000\014\030\026\034\016\035" +
    "\023\036\022\037\020\001\002\000\024\012\uffd4\013\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\031" +
    "\uffd4\001\002\000\024\012\uffd3\013\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\031\uffd3\001\002\000" +
    "\020\013\uffef\030\026\031\uffef\034\016\035\023\036\022" +
    "\037\020\001\002\000\006\013\040\031\054\001\002\000" +
    "\034\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\031" +
    "\ufff3\001\002\000\010\002\uffff\004\uffff\036\uffff\001\002" +
    "\000\010\002\ufffe\004\ufffe\036\ufffe\001\002\000\004\030" +
    "\062\001\002\000\014\030\026\034\016\035\023\036\022" +
    "\037\020\001\002\000\004\012\uffd6\001\002\000\010\004" +
    "\013\013\ufff5\031\ufff5\001\002\000\006\013\ufff6\031\ufff6" +
    "\001\002\000\006\013\065\031\066\001\002\000\004\004" +
    "\013\001\002\000\004\014\067\001\002\000\006\004\072" +
    "\005\071\001\002\000\004\032\073\001\002\000\004\032" +
    "\ufff8\001\002\000\004\032\ufff9\001\002\000\024\004\uffea" +
    "\006\uffea\007\uffea\011\uffea\032\073\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\001\002\000\010\002\ufffa\004\ufffa\036\ufffa" +
    "\001\002\000\022\004\013\006\113\007\104\011\101\033" +
    "\146\034\016\035\023\036\106\001\002\000\022\004\uffea" +
    "\006\uffea\007\uffea\011\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\001\002\000\022\004\013\006\113\007\104\011\101" +
    "\033\102\034\016\035\023\036\106\001\002\000\022\004" +
    "\uffec\006\uffec\007\uffec\011\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\001\002\000\004\030\117\001\002\000\026\002" +
    "\uffee\004\uffee\006\uffee\007\uffee\010\uffee\011\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\001\002\000\004\012\143\001" +
    "\002\000\004\030\117\001\002\000\004\012\uffdb\001\002" +
    "\000\006\021\060\030\043\001\002\000\022\004\uffeb\006" +
    "\uffeb\007\uffeb\011\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\001\002\000\022\004\uffe8\006\uffe8\007\uffe8\011\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\001\002\000\004\012\uffd9" +
    "\001\002\000\004\012\uffdc\001\002\000\014\030\026\034" +
    "\016\035\023\036\022\037\020\001\002\000\022\004\uffe9" +
    "\006\uffe9\007\uffe9\011\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\001\002\000\004\012\uffda\001\002\000\004\012\uffd5" +
    "\001\002\000\014\030\026\034\016\035\023\036\022\037" +
    "\020\001\002\000\004\032\073\001\002\000\024\004\uffe7" +
    "\006\uffe7\007\uffe7\010\122\011\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\001\002\000\004\032\073\001\002\000\022" +
    "\004\uffe6\006\uffe6\007\uffe6\011\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\001\002\000\016\022\130\023\131\024\134" +
    "\025\133\026\127\027\132\001\002\000\004\031\126\001" +
    "\002\000\004\032\uffe5\001\002\000\014\030\026\034\016" +
    "\035\023\036\022\037\020\001\002\000\014\030\026\034" +
    "\016\035\023\036\022\037\020\001\002\000\014\030\026" +
    "\034\016\035\023\036\022\037\020\001\002\000\014\030" +
    "\026\034\016\035\023\036\022\037\020\001\002\000\014" +
    "\030\026\034\016\035\023\036\022\037\020\001\002\000" +
    "\014\030\026\034\016\035\023\036\022\037\020\001\002" +
    "\000\004\031\uffe0\001\002\000\004\031\uffe3\001\002\000" +
    "\004\031\uffe1\001\002\000\004\031\uffdf\001\002\000\004" +
    "\031\uffe4\001\002\000\004\031\uffe2\001\002\000\022\004" +
    "\uffdd\006\uffdd\007\uffdd\011\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\001\002\000\004\032\073\001\002\000\022\004" +
    "\uffde\006\uffde\007\uffde\011\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\001\002\000\026\002\uffed\004\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\001\002\000\006\013\ufff7\031\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\006\002\004\003\003\001\001\000\010\004" +
    "\007\026\011\027\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\024\022\020\023\016\024\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\024\022\026" +
    "\023\016\024\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\024\023\033\024\023\001\001\000\010" +
    "\007\024\023\032\024\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\024\010\035\022\036\023\016" +
    "\024\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\024\022\041\023\016\024\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\024\010\043\022" +
    "\036\023\016\024\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\024\022\050\023\016\024\023\001" +
    "\001\000\012\007\024\022\047\023\016\024\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\024\010" +
    "\052\022\036\023\016\024\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\024\022\060\023\016\024\023" +
    "\001\001\000\002\001\001\000\006\006\063\026\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\146" +
    "\001\001\000\002\001\001\000\004\005\067\001\001\000" +
    "\004\011\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\075\012\074\001\001\000\002\001\001\000" +
    "\024\007\110\013\106\014\113\017\107\020\077\021\102" +
    "\025\114\026\111\027\104\001\001\000\004\012\076\001" +
    "\001\000\024\007\110\013\106\014\113\017\107\020\077" +
    "\021\102\025\114\026\111\027\104\001\001\000\002\001" +
    "\001\000\004\015\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\024\022\115\023" +
    "\016\024\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\024\016\124\022\123\023" +
    "\016\024\023\001\001\000\004\011\120\001\001\000\002" +
    "\001\001\000\004\011\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\024\022\141\023\016\024\023\001\001\000\012\007" +
    "\024\022\140\023\016\024\023\001\001\000\012\007\024" +
    "\022\137\023\016\024\023\001\001\000\012\007\024\022" +
    "\136\023\016\024\023\001\001\000\012\007\024\022\135" +
    "\023\016\024\023\001\001\000\012\007\024\022\134\023" +
    "\016\024\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {


    Integer context = null;
    SymbolsTable table = SymbolsTable.getInstance();
    AbstractSyntaxTree tree = AbstractSyntaxTree.getInstance();

    /**
     * Determine if a variable is global or local, then add it into the symbols table
     *
     * @param id id of the variable
     * @param type type of the variable
     * @param value value of the variable
     * @return key of the added variable in the symbols table
     */
    private int addVariable(String id, String type, int value) {
        int key;

        if (context == null) {
            key = table.add(new GlobalVariable(id, type, value));
        } else {
            Function f = (Function) table.get(context);
            int rank = (f.getNumberOfLocalVariables() + 2) * 4;
            key = table.add(new LocalVariable(id, type, rank, context, value));
            f.incrementNumberOfLocalVariables();
        }

        return key;
    }

    /**
     * Add a parameter into the symbols table
     *
     * @param id id of the variable
     * @param type type of the variable
     * @return key of the added parameter in the symbols table
     */
    private int addParameter(String id, String type) {
        Function f = (Function) table.get(context);
        int rank = (f.getNumberOfParameters() - 2) * 4;
        int key = table.add(new Parameter(id, type, rank, context));
        f.incrementNumberOfParameters();

        return key;
    }

    /**
     * Returns a node that represents an if statement without else clause
     *
     * @param condition node that represents the logical expression of the condition
     * @param _then list of node representing instructions executed if the condition is verified
     * @return node that represents an if statement
     */
    private InnerNode createIfNode(Node condition, LinkedList<Node> _then) {
        InnerNode ret = new InnerNode(NodeSymbol.IF, -404);
        ret.addChild(condition);
        ret.addChild(new InnerNode(NodeSymbol.THEN, -404, _then));
        return ret;
    }

    /**
     * Returns a node that represents an if statement with an else clause
     *
     * @param condition node that represents the logical expression of the condition
     * @param _then list of node representing instructions executed if the condition is verified
     * @param _else list of node representing instructions executed if the condition is not verified
     * @return node that represents an if statement
     */
    private InnerNode createIfNode(Node condition, LinkedList<Node> _then, LinkedList<Node> _else) {
        InnerNode ret = createIfNode(condition, _then);
        ret.addChild(new InnerNode(NodeSymbol.ELSE, -404, _else));
        return ret;
    }

    /**
     * Returns a node representing an expression (can be logical or arithmetical)
     *
     * @param symbol operator
     * @param left left member
     * @param right right member
     * @return node representing a comparison
     */
    private InnerNode createExpressionNode(NodeSymbol symbol, Node left, Node right) {
        return new InnerNode(symbol, -404, new LinkedList(Arrays.asList(new Node[] { left, right })));        
    }

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= entry EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // entry ::= program 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		LinkedList<Node> p = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            InnerNode root = new InnerNode(NodeSymbol.PROGRAM, -404);
            root.addChild(p);
            tree.setRoot(root);
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("entry",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program var_declaration SEMICOLON 
            {
              LinkedList<Node> RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= program var_assignation SEMICOLON 
            {
              LinkedList<Node> RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= program func_definition 
            {
              LinkedList<Node> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		LinkedList<Node> p = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		InnerNode f = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 p.add(f); RESULT = p; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= 
            {
              LinkedList<Node> RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              InnerNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 context = table.add(new Function((String) id)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_definition ::= ID NT$0 OPEN_P parameters CLOSE_P ARROW func_type block 
            {
              InnerNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (InnerNode) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		LinkedList<Node> b = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                        Function f = (Function) table.get(context);
                        f.setType((String) t);
                        RESULT = new InnerNode(NodeSymbol.FUNCTION, context, b);
                        context = null;
                    
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("func_definition",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_type ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("func_type",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_type ::= VOID 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = v; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("func_type",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parameters ::= parameters COMMA var_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameters ::= var_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameters ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_call ::= ID OPEN_P arguments CLOSE_P 
            {
              InnerNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		LinkedList<Node> a = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new InnerNode(NodeSymbol.CALL, -404, a); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("func_call",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_call ::= READ OPEN_P arguments CLOSE_P 
            {
              InnerNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		LinkedList<Node> a = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new InnerNode(NodeSymbol.READ, -404, a); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("func_call",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_call ::= WRITE OPEN_P arguments CLOSE_P 
            {
              InnerNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		LinkedList<Node> a = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new InnerNode(NodeSymbol.WRITE, -404, a); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("func_call",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arguments ::= arguments COMMA expression 
            {
              LinkedList<Node> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		LinkedList<Node> a = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 a.add(ex); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arguments",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arguments ::= expression 
            {
              LinkedList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LinkedList(Arrays.asList(new Node[] {e})); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arguments",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arguments ::= 
            {
              LinkedList<Node> RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arguments",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block ::= OPEN_B block inner_block CLOSE_B 
            {
              LinkedList<Node> RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // block ::= OPEN_B inner_block CLOSE_B 
            {
              LinkedList<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		LinkedList<Node> i = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inner_block ::= inner_block instruction 
            {
              LinkedList<Node> RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		LinkedList<Node> in = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		InnerNode i = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                    if (in != null) {
                        in.add(i);
                        RESULT = in;
                    } else {
                        RESULT = new LinkedList();
                    }
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("inner_block",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inner_block ::= inner_block control_flow 
            {
              LinkedList<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		LinkedList<Node> i = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		InnerNode c = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 i.add(c); RESULT = i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("inner_block",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inner_block ::= 
            {
              LinkedList<Node> RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("inner_block",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // control_flow ::= if_statement 
            {
              InnerNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		InnerNode i = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("control_flow",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // control_flow ::= while_loop 
            {
              InnerNode RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		InnerNode w = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = w; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("control_flow",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_statement ::= IF condition block 
            {
              InnerNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		InnerNode c = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		LinkedList<Node> b = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createIfNode(c, b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_statement",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if_statement ::= IF condition block ELSE block 
            {
              InnerNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		InnerNode c = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		LinkedList<Node> b1 = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		LinkedList<Node> b2 = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createIfNode(c, b1, b2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_statement",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= OPEN_P comparison CLOSE_P 
            {
              InnerNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		InnerNode c = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = c; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparison ::= expression LT expression 
            {
              InnerNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createExpressionNode(NodeSymbol.LT, e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparison",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparison ::= expression LE expression 
            {
              InnerNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createExpressionNode(NodeSymbol.LE, e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparison",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparison ::= expression EQ expression 
            {
              InnerNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createExpressionNode(NodeSymbol.EQ, e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparison",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparison ::= expression DIFF expression 
            {
              InnerNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createExpressionNode(NodeSymbol.DIFF, e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparison",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparison ::= expression GE expression 
            {
              InnerNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createExpressionNode(NodeSymbol.GE, e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparison",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparison ::= expression GT expression 
            {
              InnerNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createExpressionNode(NodeSymbol.GT, e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparison",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // while_loop ::= WHILE condition block 
            {
              InnerNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		InnerNode c = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		LinkedList<Node> b = (LinkedList<Node>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 b.addFirst(c); RESULT = new InnerNode(NodeSymbol.WHILE, -404, b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while_loop",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruction ::= concrete_instruction SEMICOLON 
            {
              InnerNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		InnerNode c = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = c; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // concrete_instruction ::= var_declaration 
            {
              InnerNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		InnerNode vd = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = vd; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("concrete_instruction",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // concrete_instruction ::= var_assignation 
            {
              InnerNode RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		InnerNode va = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = va; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("concrete_instruction",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // concrete_instruction ::= return_statement 
            {
              InnerNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		InnerNode r = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = r; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("concrete_instruction",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // concrete_instruction ::= func_call 
            {
              InnerNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		InnerNode f = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = f; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("concrete_instruction",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_declaration ::= INT ID ASSIGN expression 
            {
              InnerNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                        // Resolving key
                        int key;

                        if (e instanceof LeafNode) {
                            LeafNode tmp = (LeafNode) e;
                            key = addVariable(id.toString(), t.toString(), tmp.getValue());
                        } else {
                            key = addVariable(id.toString(), t.toString(), 0);
                        }

                        // If the variable is local
                        if (context != null) {
                            RESULT = new InnerNode(NodeSymbol.ASSIGN);
                            LeafNode left = new LeafNode(NodeSymbol.VARIABLE, key);
                            RESULT.addChild(left);
                            RESULT.addChild(e);
                        }
                    
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var_declaration",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_declaration ::= INT ID 
            {
              InnerNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                        if (context != null)
                            addParameter(id.toString(), t.toString());
                        else
                            addVariable(id.toString(), t.toString(), 0);
                    
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var_declaration",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_assignation ::= ID ASSIGN expression 
            {
              InnerNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                        RESULT = new InnerNode(NodeSymbol.ASSIGN);
                        RESULT.addChild(new LeafNode(NodeSymbol.VARIABLE, table.getClosestVariableKey(id.toString(), context)));
                        RESULT.addChild(e);
                    
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var_assignation",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // return_statement ::= RETURN expression 
            {
              InnerNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                        InnerNode tmp = new InnerNode(NodeSymbol.RETURN, -404);
                        tmp.addChild(e);
                        RESULT = tmp;
                    
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("return_statement",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= term ADD expression 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createExpressionNode(NodeSymbol.ADD, t, e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= term SUB expression 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createExpressionNode(NodeSymbol.SUB, t, e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= term 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= factor MUL term 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createExpressionNode(NodeSymbol.MUL, f, t); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= factor DIV term 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = createExpressionNode(NodeSymbol.DIV, f, t); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= factor 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = f; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= OPEN_P expression CLOSE_P 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= func_call 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		InnerNode f = (InnerNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = f; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= VALUE 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LeafNode(NodeSymbol.CONST, -404, v.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LeafNode(NodeSymbol.VARIABLE, table.getClosestVariableKey(id.toString(), context)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
