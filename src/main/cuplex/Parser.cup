/**
 * Analyseur lexical
 *
 * Auteurs :
 *      Jérémy Thomas,
 *      Ouafa Bourekhsas,
 *      Salme Ould Ahmed,
 *      Théo Cominolo,
 *      Pierre Duclou
 *
 * Version SNAPSHOT-1.0
 */

// Header
package generated.cuplex;

import ul.miage.l3.compilation.groupe_i.symbols.*;

// Action code
action code {:
    
:};

// Verbose tokens
terminal INT, VOID, RETURN, IF, ELSE, WHILE;

// Delimiters
terminal SEMICOLON, COMMA, ARROW;

// Operators
terminal ADD, SUB, DIV, MUL, MOD, ASSIGN, LT, GT, GE, LE, EQ;

// Wrappers
terminal OPEN_P, CLOSE_P, OPEN_B, CLOSE_B;

// Custom tokens
terminal ID, VALUE;

non terminal entry;
non terminal program;
non terminal func_definition;
non terminal func_type;
non terminal parameters;
non terminal func_call;
non terminal arguments;
non terminal block;
non terminal inner_block;
non terminal control_flow;
non terminal if_statement;
non terminal condition;
non terminal comparison;
non terminal while_loop;
non terminal instruction;
non terminal concrete_instruction;
non terminal var_declaration;
non terminal var_assignation;
non terminal return_statement;
non terminal expression;
non terminal term;
non terminal factor;

start with entry;

entry ::= program;

program ::= program var_declaration SEMICOLON
          | var_declaration SEMICOLON
          | program var_assignation SEMICOLON
          | var_assignation SEMICOLON
          | program func_definition
          | func_definition;

//--- Function ----------------------------------------------------------------
func_definition ::= ID OPEN_P parameters CLOSE_P ARROW func_type block;
func_type       ::= INT | VOID;
parameters      ::= parameters COMMA var_declaration
                  | var_declaration 
                  | ;
func_call       ::= ID OPEN_P arguments CLOSE_P;
arguments       ::= arguments COMMA expression 
                  | expression
                  | ;

//--- Block -------------------------------------------------------------------
block       ::= OPEN_B block inner_block CLOSE_B
              | OPEN_B inner_block CLOSE_B
              | OPEN_B CLOSE_B;
inner_block ::= inner_block instruction
              | instruction
              | inner_block control_flow
              | control_flow;

//--- Control flow ------------------------------------------------------------
control_flow ::= if_statement
               | while_loop;

// IF statement
if_statement ::= IF condition block
               | IF condition block ELSE block;

condition    ::= OPEN_P comparison CLOSE_P;
comparison   ::= expression LT expression
               | expression LE expression
               | expression EQ expression
               | expression GE expression
               | expression GT expression;

// While loop
while_loop ::= WHILE condition block;

//--- Instruction -------------------------------------------------------------
instruction          ::= concrete_instruction SEMICOLON;
concrete_instruction ::= var_declaration
                       | var_assignation
                       | return_statement
                       | func_call
                       |;
var_declaration      ::= INT ID;
var_assignation      ::= var_declaration ASSIGN expression
                       | ID ASSIGN expression;
return_statement     ::= RETURN expression;

// Expression
expression ::= term ADD expression
             | term SUB expression
             | term;
term       ::= factor MUL term
             | factor DIV term
             | factor MOD term
             | factor;
factor     ::= OPEN_P expression CLOSE_P
             | ID
             | func_call
             | VALUE;
