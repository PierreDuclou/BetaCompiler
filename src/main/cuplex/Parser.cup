/**
 * Analyseur lexical
 *
 * Auteurs :
 *      Jérémy Thomas,
 *      Ouafa Bourekhsas,
 *      Salme Ould Ahmed,
 *      Théo Cominolo,
 *      Pierre Duclou
 *
 * Version SNAPSHOT-1.0
 */

// Header
package generated.cuplex;

// Verbose tokens
terminal INT, VOID, RETURN, IF, ELSE, WHILE;

// Delimiters
terminal SEMICOLON, COMMA, ARROW;

// Operators
terminal ADD, SUB, DIV, MUL, MOD, ASSIGN, LT, GT, GE, LE, EQ;

// Wrappers
terminal OPEN_P, CLOSE_P, OPEN_B, CLOSE_B;

// Custom tokens
terminal ID, VALUE;

non terminal program;
non terminal func_definition;
non terminal func_type;
non terminal parameters;
non terminal func_call;
non terminal arguments;
non terminal block;
non terminal inner_block;
non terminal control_flow;
non terminal if_statement;
non terminal condition;
non terminal comparison;
non terminal while_loop;
non terminal instruction;
non terminal concrete_instruction;
non terminal var_declaration;
non terminal var_assignation;
non terminal return_statement;
non terminal expression;
non terminal term;
non terminal factor;

precedence left ADD, SUB;
precedence left MUL, DIV, MOD;

start with program;

program ::= program var_declaration SEMICOLON {: System.out.println("1"); :}
          | var_declaration SEMICOLON {: System.out.println("2"); :}
          | program var_assignation SEMICOLON {: System.out.println("52"); :}
          | var_assignation SEMICOLON {: System.out.println("53"); :}
          | program func_definition {: System.out.println("3"); :}
          | func_definition {: System.out.println("4"); :};

//--- Function ----------------------------------------------------------------
func_definition ::= ID OPEN_P parameters CLOSE_P ARROW func_type block  {: System.out.println("5"); :};
func_type       ::= INT | VOID  {: System.out.println("6"); :};
parameters      ::= parameters COMMA var_declaration  {: System.out.println("7"); :}
                  | var_declaration {: System.out.println("8"); :}
                  |  {: System.out.println("9"); :};
func_call       ::= ID OPEN_P arguments CLOSE_P  {: System.out.println("10"); :};
arguments       ::= arguments COMMA expression  {: System.out.println("11"); :}
                  | expression {: System.out.println("12"); :}
                  |  {: System.out.println("13"); :};

//--- Block -------------------------------------------------------------------
block       ::= OPEN_B block inner_block CLOSE_B {: System.out.println("14"); :}
              | OPEN_B inner_block CLOSE_B {: System.out.println("15"); :}
              | OPEN_B CLOSE_B  {: System.out.println("16"); :};
inner_block ::= inner_block instruction {: System.out.println("17"); :}
              | instruction {: System.out.println("18"); :}
              | inner_block control_flow {: System.out.println("19"); :}
              | control_flow {: System.out.println("19"); :};

//--- Control flow ------------------------------------------------------------
control_flow ::= if_statement {: System.out.println("20"); :}
               | while_loop {: System.out.println("21"); :};

// IF statement
if_statement ::= IF condition block {: System.out.println("22"); :}
               | IF condition block ELSE block {: System.out.println("23"); :};

condition    ::= OPEN_P comparison CLOSE_P {: System.out.println("24"); :};
comparison   ::= expression LT expression {: System.out.println("25"); :}
               | expression LE expression {: System.out.println("26"); :}
               | expression EQ expression {: System.out.println("27"); :}
               | expression GE expression {: System.out.println("28"); :}
               | expression GT expression {: System.out.println("29"); :};

// While loop
while_loop ::= WHILE condition block {: System.out.println("30"); :};

//--- Instruction -------------------------------------------------------------
instruction          ::= concrete_instruction SEMICOLON {: System.out.println("31"); :};
concrete_instruction ::= var_declaration {: System.out.println("32"); :}
                       | var_assignation {: System.out.println("33"); :}
                       | return_statement {: System.out.println("34"); :}
                       | func_call {: System.out.println("35"); :}
                       | {: System.out.println("36"); :};
var_declaration      ::= INT ID {: System.out.println("37"); :};
var_assignation      ::= var_declaration ASSIGN expression {: System.out.println("38"); :}
                       | ID ASSIGN expression {: System.out.println("39"); :};
return_statement     ::= RETURN expression {: System.out.println("40"); :};

// Expression
expression ::= term ADD expression {: System.out.println("41"); :}
             | term SUB expression {: System.out.println("42"); :}
             | term {: System.out.println("43"); :};
term       ::= factor MUL term {: System.out.println("44"); :}
             | factor DIV term {: System.out.println("45"); :}
             | factor MOD term {: System.out.println("46"); :}
             | factor {: System.out.println("47"); :};
factor     ::= OPEN_P expression CLOSE_P {: System.out.println("48"); :}
             | ID {: System.out.println("49"); :}
             | func_call {: System.out.println("50"); :}
             | VALUE {: System.out.println("51"); :};
